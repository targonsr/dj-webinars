# Docker Compose for geo-app (Best Practices Applied)
# - Images pinned to explicit versions
# - Resource limits set for production
# - Comments added for clarity
# - For multi-environment support, use docker-compose.override.yaml or profiles
# - Environment variables should be defined in a .env file (not in version control)

networks:
  db-net:
    driver: bridge
  backend-net:
    driver: bridge
  frontend-net:
    driver: bridge
  monitoring-net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  grafana_data:

services:
  postgres:
    image: duvel/postgis:15-3.3 # Latest stable version (Debian-based, Postgres 17, PostGIS 3.5.x)
    container_name: geo-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistent storage
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql # DB initialization
    networks:
      - db-net
      - backend-net
      - monitoring-net # Allow monitoring access
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.00'
          memory: 2048M
        reservations:
          cpus: '1.00'
          memory: 1024M

  redis:
    image: redis:7.4.5-alpine # Latest stable version
    container_name: geo-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data # Persistent storage
    networks:
      - db-net
      - backend-net
      - monitoring-net # Allow monitoring access
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1024M
        reservations:
          cpus: '0.50'
          memory: 512M

  api:
    build: ./api # Use Dockerfile in ./api
    container_name: geo-api
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGINS: ${CORS_ORIGINS}
    ports:
      - "8000:8000" # Only expose if needed externally
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-net
      - frontend-net
      - monitoring-net # Allow monitoring access
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.00'
          memory: 2048M
        reservations:
          cpus: '1.00'
          memory: 1024M

  frontend:
    build: ./frontend # Use Dockerfile in ./frontend
    container_name: geo-frontend
    restart: unless-stopped
    ports:
      - "3000:80" # Only expose if needed externally
    depends_on:
      - api
    networks:
      - frontend-net
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1024M
        reservations:
          cpus: '0.50'
          memory: 512M

  prometheus:
    image: prom/prometheus:v3.5.0 # Latest stable version
    container_name: geo-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml # Custom config
    ports:
      - "9090:9090" # Only expose if needed externally
    networks:
      - monitoring-net
      - backend-net # To scrape API/DB
      - db-net # To scrape DB/Redis
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1024M
        reservations:
          cpus: '0.50'
          memory: 512M

  grafana:
    image: grafana/grafana:12.1.0 # Latest stable version
    container_name: geo-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana # Persistent storage
    ports:
      - "3001:3000" # Only expose if needed externally
    networks:
      - monitoring-net
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1024M
        reservations:
          cpus: '0.40'
          memory: 512M
